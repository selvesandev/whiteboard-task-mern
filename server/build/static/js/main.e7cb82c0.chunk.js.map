{"version":3,"sources":["utils/request.js","utils/helpers.js","store/ActionTypes.js","store/actions/categoryAction.js","store/actions/taskAction.js","components/Loader.js","components/AppInputs.js","components/CategoryBox.js","components/TaskCard.js","components/WhiteBoard.js","components/Modal.js","components/TaskModal.js","components/Downloader.js","App.js","reportWebVitals.js","store/reducers/categoryReducer.js","store/reducers/taskReducer.js","store/reducers/index.js","index.js"],"names":["axios","defaults","baseURL","process","headers","post","interceptors","response","use","error","data","status","Promise","reject","get","url","params","resolve","requestObject","method","put","deleteR","randomStr","length","result","characters","charactersLength","i","charAt","Math","floor","random","CATEOGRY_GENERAL_STATE","CATEGORY_TASK_REORDER_STATIC","CATEGORY_TASK_UPDATE_STATIC","CATEGORY_TASK_DELETE_STATIC","CATEGORY_CREATE_STATIC","CATEGORY_TASK_STATIC","TASK_GENERAL_STATE","categoryGeneralStateChange","props","value","deep","type","ActionTypes","payload","getCategories","dispatch","a","categories","Error","taskGeneralStateChange","updateTask","id","svg_events","mode","category","_id","Loader","height","width","color","isFullScreen","className","style","version","xmlns","x","y","viewBox","enableBackground","fill","d","attributeName","attributeType","dur","from","to","repeatCount","onClick","e","TextInputField","onBlur","placeholder","onChange","loading","autoFocus","onFocus","target","select","CategoryBox","selectCategory","children","onSave","useState","selectedCategory","setSelectedCategory","categoryName","setCategoryName","useDispatch","categoryState","useSelector","state","useEffect","name","onSubmit","preventDefault","updateCategory","then","res","catch","err","createCategory","saving","text","proTotype","eventStream","EventStream","eventStore","EventStore","TaskCard","task","onUpdate","onDelete","onDuplicate","duplicate","setDuplicate","taskState","goodEvents","backgroundColor","events","href","disabled","static","finally","ordering","deleteTask","AppWhiteBoard","onStop","on","Modal","onClose","show","title","subTitle","btnText","svgEvents","TaskModal","selectedTask","console","log","createTask","DownloadFlush","window","location","App","setselectedCategory","setSelectedTask","setMode","addNewCategory","setAddNewCategory","onDragEnd","destination","source","draggableId","droppableId","index","sourceIndex","destinationIndex","getState","order","lastSavedOrder","reOrderCategory","map","catIn","String","provided","snapshot","isDraggingOver","droppableProps","ref","innerRef","tasks","taIn","isDragging","draggableProps","dragHandleProps","marginRight","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","INITIAL_STATE","fetching","CategoryReducer","action","filterFromTask","taskId","tsk","item","push","taskSelected","filter","isStatic","categoryIndex","taskIndex","c","t","splice","TaskReducer","combineReducers","categoryReducer","taskReducer","store","createStore","reducers","compose","applyMiddleware","thunk","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.e7cb82c0.chunk.js","sourcesContent":["import axios from \"axios\";\nconst apiURL = process.env.REACT_APP_API_PATH;\naxios.defaults.baseURL = apiURL;\naxios.defaults.headers.post['Content-Type'] = 'application/json';\n\naxios.interceptors.response.use(function (response) {\n    return response;\n}, function (error) {\n    if (error.response && error.response.data) {\n        switch (error.response.status) {\n            case 400:\n                //open notification\n                break;\n            case 401:\n                //logout\n                break;\n            default:\n                break;\n        }\n    }\n    return Promise.reject(error);\n});\n\n\n/**\n * Send Get Request to the server uses axios\n * @param {*} param0 \n * @returns \n */\nexport const get = ({ url, params }) => {\n    let token = null;\n    return new Promise((resolve, reject) => {\n        let requestObject = {\n            method: \"GET\",\n            url,\n            params,\n        };\n        if (token) {\n            requestObject.headers = {\n                Authorization: `Bearer ${token}`\n            };\n        }\n        return resolve(axios(requestObject));\n    });\n};\n\n\n/**\n * Send Post Request to the server uses axios\n * @param {*} param0\n * @returns\n */\n\nexport const post = ({ url, data, params }) => {\n    let token = null;\n    return new Promise((resolve, reject) => {\n\n        let requestObject = {\n            method: 'POST',\n            url,\n            data,\n            params,\n            headers: {}\n        };\n\n        if (token) {\n            requestObject.headers = {\n                Authorization: `Bearer ${token}`\n            };\n        }\n\n        return resolve(axios(requestObject));\n    });\n};\n\n/**\n * Send Put Request to the server uses axios\n * @param {*} param0\n * @returns\n */\n\nexport const put = ({ url, data, params }) => {\n    let token = null;\n    return new Promise((resolve, reject) => {\n        let requestObject = {\n            method: 'PUT',\n            url,\n            data,\n            params,\n            headers: {}\n        };\n\n        if (token) {\n            requestObject.headers = {\n                Authorization: `Bearer ${token}`\n            };\n        }\n        return resolve(axios(requestObject));\n    });\n};\n\n\n/**\n * Send Delete Request to the server uses axios\n * @param {*} param0\n * @returns\n */\n\nexport const deleteR = ({ url, data, params = {} }) => {\n    let token = null;\n\n    return new Promise((resolve, reject) => {\n        let requestObject = {\n            method: \"DELETE\",\n            url,\n            data,\n            params,\n            headers: {}\n        };\n        if (token) {\n            requestObject.headers = {\n                Authorization: `${token}`\n            };\n        }\n        return resolve(axios(requestObject));\n    });\n};\n\n\n\n\n// export const sendPut = (url, data, params = {}, tokenCheck = false, ctx = {}, fileUpload = false) => {\n//     let token = '';\n//     if (tokenCheck === true) {\n//         token = getCookie('et_au', ctx.req);\n//     }\n//     return new Promise((resolve, reject) => {\n//         if (tokenCheck && !token) return reject({ internal_error: 'Access Token is missing!' });\n\n//         let requestObject = {\n//             method: 'PUT',\n//             url,\n//             data,\n//             params,\n//             httpsAgent: new https.Agent({ rejectUnauthorized: false })\n//         };\n\n//         if (token) {\n//             requestObject.headers = {\n//                 Authorization: `${token}`\n//             };\n//         }\n\n\n//         if (fileUpload) {\n//             requestObject.headers['Content-Type'] = 'multipart/form-data';\n//         }\n//         return resolve(axios(requestObject));\n//     });\n// };\n\n\n\n","const randomStr = (length) => {\n    var result = '';\n    var characters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\n    var charactersLength = characters.length;\n    for (var i = 0; i < length; i++) {\n        result += characters.charAt(Math.floor(Math.random() * charactersLength));\n    }\n    return result;\n}\n\nexport { randomStr };","//category\nexport const CATEOGRY_GENERAL_STATE = 'CATEOGRY_GENERAL_STATE';\nexport const CATEGORY_TASK_REORDER_STATIC = 'CATEGORY_TASK_REORDER_STATIC';\nexport const CATEGORY_TASK_UPDATE_STATIC = 'CATEGORY_TASK_UPDATE_STATIC';\nexport const CATEGORY_TASK_DELETE_STATIC = 'CATEGORY_TASK_DELETE_STATIC';\nexport const CATEGORY_CREATE_STATIC = 'CATEGORY_CREATE_STATIC';\nexport const CATEGORY_TASK_STATIC = 'CATEGORY_TASK_STATIC';\n//task\nexport const TASK_GENERAL_STATE = 'TASK_GENERAL_STATE';\nexport const TASK_DELETE_STATE = 'TASK_DELETE_STATE';\n\n","import { get, post, put, deleteR } from '../../utils';\nimport * as ActionTypes from '../ActionTypes';\n\n/**\n * Use this to update the every category state on the reducer pass deep to update the object state on level down.\n * @param {*} param0 \n * @returns \n */\nexport const categoryGeneralStateChange = ({ props, value, deep }) => {\n    return { type: ActionTypes.CATEOGRY_GENERAL_STATE, payload: { props, value, deep } }\n}\n\n/**\n * Fetch categories from the api\n * @param {*} loader \n * @returns \n */\nexport const getCategories = (loader = true) => async (dispatch) => {\n    try {\n        dispatch(categoryGeneralStateChange({ props: 'fetching', value: true }));\n        const categories = await get({ url: '/category' });\n        dispatch(categoryGeneralStateChange({ props: 'data', value: categories.data.data }));\n\n    } catch (err) {\n        throw Error(err);\n    } finally {\n        dispatch(categoryGeneralStateChange({ props: 'fetching', value: false }));\n    }\n}\n\n/**\n * Create new category\n * @param {*} param0 \n * @returns \n */\nexport const createCategory = ({ name }) => async (dispatch) => {\n    try {\n        dispatch({ type: ActionTypes.CATEGORY_CREATE_STATIC, payload: { name } });\n        dispatch(categoryGeneralStateChange({ props: 'saving', value: true }));\n        return await post({ url: '/category', data: { name } });\n    } catch (err) {\n        throw Error(err);\n    } finally {\n        dispatch(categoryGeneralStateChange({ props: 'saving', value: false }));\n    }\n}\n\n/**\n * Update Category\n * @param {*} param0 \n * @returns \n */\nexport const updateCategory = ({ id, name }) => async (dispatch) => {\n    try {\n        dispatch(categoryGeneralStateChange({ props: 'saving', value: true }));\n        return await put({ url: `/category/${id}`, data: { name } });\n    } catch (err) {\n        throw Error(err);\n    } finally {\n        dispatch(categoryGeneralStateChange({ props: 'saving', value: false }));\n    }\n}\n\n\n/**\n * Delete all task/categories\n * @param {*} param0 \n * @returns \n */\nexport const flushRecord = () => async (dispatch) => {\n    try {\n        dispatch(categoryGeneralStateChange({ props: 'data', value: [] }));\n        const response = await deleteR({ url: `/category/flush-record` });\n        dispatch(getCategories());\n        return response;\n    } catch (err) {\n        throw Error(err);\n    } finally {\n        dispatch(categoryGeneralStateChange({ props: 'saving', value: false }));\n    }\n}\n\n\n\n/**\n * Download the json verson of mongo db.\n * @param {*} param0 \n * @returns \n */\nexport const downloadBackup = () => async () => {\n    try {\n        return await get({ url: `/category/download` });\n    } catch (err) {\n        throw Error(err);\n    } finally {\n    }\n}","import * as ActionTypes from '../ActionTypes';\nimport { deleteR, post, put } from '../../utils';\n\n\n/**\n * Use this to update the every task state on the reducer pass deep to update the object state on level down.\n * @param {*} param0 \n * @returns \n */\nexport const taskGeneralStateChange = ({ props, value, deep }) => {\n    return { type: ActionTypes.TASK_GENERAL_STATE, payload: { props, value, deep } }\n}\n\n/**\n * All /task to create task update the loading state\n * @param {*} param0 \n * @returns \n */\nexport const createTask = ({ category, svg_events }) => async (dispatch) => {\n    try {\n        dispatch(taskGeneralStateChange({ props: 'saving', value: true }));\n\n        const response = await post({ url: '/task', data: { category, svg_events } });\n        // console.log(response.data.data);\n        dispatch({ type: ActionTypes.CATEGORY_TASK_STATIC, payload: { category, svg_events, id: response.data.data._id } });\n\n    } catch (err) {\n        throw Error(err);\n    } finally {\n        dispatch(taskGeneralStateChange({ props: 'saving', value: false }));\n    }\n}\n\n/**\n * Update the task.\n * @param {*} param0 \n * @returns \n */\nexport const updateTask = ({ id, svg_events, mode = 'CREATE', category }) => async (dispatch) => {\n    try {\n        dispatch(taskGeneralStateChange({ props: 'saving', value: true }));\n        const response = await put({ url: `/task/${id}`, data: { svg_events, category: category }, params: { mode } });\n        dispatch({ type: ActionTypes.CATEGORY_TASK_UPDATE_STATIC, payload: { id: response.data.data._id, svg_events, mode, category } });\n        // dispatch(getCategories());\n        return response;\n    } catch (err) {\n        throw Error(err);\n    } finally {\n        dispatch(taskGeneralStateChange({ props: 'saving', value: false }));\n    }\n}\n\n\n/**\n * Delete task with object id / aslo update the state before the api call for quick response\n * @param {*} param0 \n * @returns \n */\nexport const deleteTask = ({ id }) => async (dispatch) => {\n    try {\n        dispatch({ type: ActionTypes.CATEGORY_TASK_DELETE_STATIC, payload: { value: id } });\n        const response = await deleteR({ url: `/task/${id}` });\n        return response;\n    } catch (err) {\n        throw Error(err);\n    } finally {\n    }\n}\n\n/**\n * Move the task from one component to the other / also update the task/categories update prio api call for quick response \n * @param {*} param0 \n * @returns \n */\nexport const reOrderCategory = ({ destination, id, source, sourceIndex, destinationIndex }) => async (dispatch, getState) => {\n    try {\n        if (destination === source) return;\n\n        dispatch({ type: ActionTypes.CATEGORY_TASK_REORDER_STATIC, payload: { destination, source, id } });\n\n        const order = getState().category.lastSavedOrder\n        dispatch(taskGeneralStateChange({ props: 'ordering', value: true }));\n        const response = await put({ url: `/task/reorder/${order.id}`, data: { category: order.destination } }).catch(err => {\n            console.log(err);\n        });\n        return response;\n        // }\n\n    } catch (err) {\n        throw Error(err);\n    } finally {\n        dispatch(taskGeneralStateChange({ props: 'ordering', value: false }));\n    }\n}\n\n\n","/**\n * SVG Loader component\n * @param {*} param0 \n * @returns \n */\nconst Loader = ({ height = 100, width = 100, color = '#fff', isFullScreen = false }) => {\n    return <div><div className={'loader ' + (isFullScreen ? 'full_screen' : '')}><svg style={{ width, height }} version=\"1.1\" id=\"L9\" xmlns=\"http://www.w3.org/2000/svg\" x=\"0px\" y=\"0px\"\n        viewBox=\"0 0 100 100\" enableBackground=\"new 0 0 0 0\" >\n        <path fill={color} d=\"M73,50c0-12.7-10.3-23-23-23S27,37.3,27,50 M30.9,50c0-10.5,8.5-19.1,19.1-19.1S69.1,39.5,69.1,50\">\n            <animateTransform\n                attributeName=\"transform\"\n                attributeType=\"XML\"\n                type=\"rotate\"\n                dur=\"1s\"\n                from=\"0 50 50\"\n                to=\"360 50 50\"\n                repeatCount=\"indefinite\" />\n        </path>\n    </svg>\n\n    </div>\n        {isFullScreen ? <div className=\"bg\" onClick={e => {\n\n        }} /> : null}\n    </div>;\n}\n\nexport { Loader };","import { Loader } from \"./Loader\";\n\n/**\n * Input field component call this to render input[type=text]\n * @param {*} param0 \n * @returns \n */\nconst TextInputField = ({ value, onBlur, placeholder, onChange, loading }) => {\n    return <div className=\"input_container\"><input type=\"text\" className=\"input_element\" placeholder={placeholder} autoFocus={true} onFocus={(e) => {\n        e.target.select();\n    }} value={value} onBlur={onBlur} onChange={(e) => {\n        if (onChange)\n            onChange(e.target.value);\n    }} />\n        {loading ? <Loader height={40} width={40} color=\"#4caf50\" /> : null}\n    </div>;\n}\n\nexport { TextInputField };","import { useState, useEffect } from 'react';\nimport { TextInputField } from './AppInputs';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { createCategory, getCategories, updateCategory } from '../store/actions';\n\n\n/**\n * Add / Update Category also placeholder for the task list.\n * @param {*} param0 \n * @returns \n */\nconst CategoryBox = ({ category, selectCategory, children, mode = 'edit', onBlur, onSave }) => {\n    const [selectedCategory, setSelectedCategory] = useState(null);\n    const [categoryName, setCategoryName] = useState('');\n    const dispatch = useDispatch();\n\n    const categoryState = useSelector(state => state.category);\n\n    useEffect(() => {\n        if (category) {\n            setCategoryName(category.name);\n        }\n    }, [category])\n\n    return <section>\n        {mode !== 'add' && selectedCategory !== category.id ? <h2 className=\"cat_title\" onClick={() => {\n            setSelectedCategory(category.id);\n            if (selectCategory) {\n                selectCategory(category);\n            }\n        }}><span>{categoryName}</span></h2> :\n            <form onSubmit={(e) => {\n                e.preventDefault();\n                //if category was send update or create\n                if (!category) {\n                    dispatch(createCategory({ name: categoryName })).then(res => {\n                        dispatch(getCategories());\n                    }).catch(err => {\n                    });\n                    if (onSave) onSave();\n\n                } else {\n                    dispatch(updateCategory({ id: category._id, name: categoryName })).then(res => {\n                        dispatch(getCategories());\n                        if (onSave) onSave();\n                    }).catch(err => {\n                    });\n                    setSelectedCategory(null);\n\n                }\n            }}>\n                <TextInputField loading={categoryState.saving} onChange={(text) => {\n                    setCategoryName(text);\n                }} placeholder={'Name your category'} onBlur={() => {\n                    setSelectedCategory(null);\n                    //handle the cateogry input focus out from outside the component\n                    if (onBlur)\n                        onBlur();\n                }} value={categoryName} />\n            </form>}\n        <div className=\"category_card_container\">\n            {children}\n        </div>\n    </section>\n}\n\nCategoryBox.proTotype = {\n    // categoryName: PropTypes.string.isRequired\n};\n\nexport { CategoryBox };","import { useDispatch, useSelector } from 'react-redux';\nimport { deleteTask, getCategories, updateTask } from \"../store/actions\";\nimport { useState } from 'react';\nimport { Whiteboard, EventStream, EventStore } from '@ohtomi/react-whiteboard';\n\nconst eventStream = new EventStream();\nconst eventStore = new EventStore();\n\n\n/**\n * Display the fetched task svg and performs action delete/update/duplicate\n * @param {*} param0 \n * @returns \n */\nconst TaskCard = ({ task, onUpdate, onDelete, onDuplicate }) => {\n    const dispatch = useDispatch();\n    const [duplicate, setDuplicate] = useState(false);\n    const taskState = useSelector(state => state.task)\n    eventStore.goodEvents = task.svg_events;\n    return <div\n        className={'notes n_card '} style={{}}>\n\n        {/* Whiteboard to render the svg */}\n        <Whiteboard style={{ backgroundColor: 'white' }} height={150} events={eventStream} eventStore={eventStore} />\n\n        <div className=\"card_action\">\n            <a href=\"/\" disabled={duplicate} className={(duplicate ? 'disabled' : '')} onClick={(e) => {\n                e.preventDefault();\n                if (task.static) return;\n\n                setDuplicate(true);\n                //Here also passing the category because when clicking the duplicate button before the task is actually moved to the another category in the backend the duplicate is created on the previous category hence also updating the category of the card.\n                dispatch(updateTask({ id: task._id, svg_events: task.svg_events, mode: 'DUPLICATE', category: task.category })).then((res) => {\n                    // setDuplicate(true);\n                    dispatch(getCategories()).catch(() => {\n                    }).finally(() => {\n                        setDuplicate(false);\n                    });\n                }).catch(err => {\n                }).finally(() => {\n                    // setDuplicate(false);\n                });\n            }}>\n                <i className={\"far fa-copy \" + (duplicate ? 'rotate_' : '')}></i>\n            </a>\n\n            <a href=\"/\" onClick={(e) => {\n                e.preventDefault();\n                if (task.static || taskState.ordering) return;\n\n                if (onUpdate) onUpdate();\n            }} >\n                <i className=\"far fa-pen\"></i>\n            </a>\n            <a href=\"/\" onClick={(e) => {\n                e.preventDefault();\n                if (task.static) return;\n                dispatch(deleteTask({ id: task._id })).catch(() => {\n                });\n            }}>\n                <i className={\"far fa-trash \"}></i>\n            </a>\n        </div>\n        <div className=\"overlay\"></div>\n    </div>\n}\n\nexport { TaskCard };","import { Whiteboard, EventStream, EventStore } from '@ohtomi/react-whiteboard';\n\n\n/**\n * Extended whiteboard component for the App. Handles and sends the svg data on onStop event.\n * @param {*} param0 \n * @returns \n */\nconst AppWhiteBoard = ({ width, height = 150, goodEvents, onStop }) => {\n    const eventStream = new EventStream();\n    const eventStore = new EventStore();\n    eventStore.goodEvents = [];\n\n    if (goodEvents) {\n        eventStore.goodEvents = goodEvents;\n    }\n    eventStream.on('stop', function () {\n        if (onStop) onStop(eventStore.goodEvents);\n    });\n\n    return <div>\n        <Whiteboard style={{ backgroundColor: 'white' }} height={height} width={width} events={eventStream} eventStore={eventStore} />\n    </div>\n}\n\nexport { AppWhiteBoard };","/**\n * Custom Modal with inbuild action buttons\n * @param {*} param0 \n * @returns \n */\nconst Modal = ({ children, onClose, show = false, width = 500, height = 500, title, subTitle, onSave, loading = false, btnText = 'Create Task' }) => {\n\n    if (show)\n        return <div>\n            <div className=\"modal\" style={{ width, height }}>\n                <div className={'title'}>\n                    {title ? <h1 className={''}>{title}</h1> : null}\n                    {subTitle ? <small>{subTitle}</small> : null}\n                </div>\n                <div className=\"modal-body\">\n                    {children}\n                </div>\n                <div className=\"modal-action\">\n                    <div className=\"task_act_button\">\n                        <button disabled={loading} className={`btn btn-primary ${loading ? 'disabled' : ''}`} type=\"submit\" onClick={() => {\n                            if (onSave) onSave();\n                        }}>{loading ? 'Saving...' : btnText}</button>\n                  &nbsp;&nbsp;\n                  <button type=\"button\" className=\"btn\" onClick={() => {\n                            if (onClose) {\n                                onClose();\n                            }\n                        }}>Cancel</button>\n                    </div>\n\n                </div>\n            </div>\n            <div className=\"bg\" onClick={e => {\n                e.preventDefault();\n                if (onClose) {\n                    onClose();\n                }\n            }} />\n        </div>\n    return null;\n}\n\nexport { Modal };","import { useDispatch, useSelector } from 'react-redux';\nimport { createTask, updateTask } from '../store/actions';\nimport { Modal } from \"./Modal\";\nimport { AppWhiteBoard } from \"./WhiteBoard\";\n\nlet svgEvents = [];\n/**\n * The TaskModal Components is responsible to update and create the task on the whiteboard.\n * @param {*} param0 \n * @returns \n */\nconst TaskModal = ({ onClose, height = 440, category, show, mode = 'CREATE', selectedTask }) => {\n    const dispatch = useDispatch();\n    const task = useSelector(state => state.task);\n    let title = `Add New Task \"${category ? category.name : \"\"}\"`;\n    let goodEvents = null;\n    if (selectedTask) {\n        title = mode === 'CREATE' ? `Update Task \"${category ? category.name : \"\"}\"` : `Duplicate Task \"${category ? category.name : \"\"}\"`;\n        goodEvents = selectedTask.svg_events;\n        svgEvents = selectedTask.svg_events;\n    }\n\n    return <Modal\n        btnText={!selectedTask ? 'Create Task' : (mode === 'CREATE' ? 'Update Task' : 'Duplicate Task')}\n        loading={task.saving}\n        onSave={() => {\n            if (svgEvents && svgEvents.length) {\n                if (selectedTask) {\n                    dispatch(updateTask({ svg_events: svgEvents, id: selectedTask._id, mode })).then(res => {\n                        // dispatch(getCategories());\n                        onClose();\n                    }).catch(err => {\n                        console.log(err);\n                    })\n                } else {\n                    dispatch(createTask({ svg_events: svgEvents, category: category._id })).then(res => {\n                        // dispatch(getCategories());\n                        svgEvents = [];\n                        onClose();\n                    }).catch(err => {\n                        console.log(err);\n                    })\n                }\n            }\n        }}\n        height={height}\n        subTitle={\"Draw on the white board to and create a new task.\"}\n        title={title}\n        onClose={() => {\n            if (onClose) onClose();\n        }}\n        show={show}\n    >\n        <AppWhiteBoard goodEvents={goodEvents} onStop={(goodEvents) => {\n            svgEvents = goodEvents;\n        }} height={220} width={500} />\n        <p style={{ color: \"#999\" }}>\n            <small>Click and move your mouse to start drawing</small>\n        </p>\n    </Modal>\n}\n\nexport { TaskModal };","import { flushRecord } from \"../store/actions\";\nimport { useDispatch } from 'react-redux';\n\nconst DownloadFlush = () => {\n    const dispatch = useDispatch(); // to dispatch the redux action\n\n    return <div className={'downloder'}>\n        <button onClick={() => {\n            window.location.href = process.env.REACT_APP_API_PATH + '/category/download';\n        }}>Download</button>\n        <button onClick={() => {\n            dispatch(flushRecord()).catch(err => {\n                console.log(err);\n            });\n        }}>Flush Records</button>\n    </div>\n}\nexport { DownloadFlush }","import { useState, useEffect } from \"react\";\nimport { useDispatch, useSelector } from 'react-redux';\nimport { DragDropContext, Droppable, Draggable } from \"react-beautiful-dnd\";\nimport { getCategories, reOrderCategory } from './store/actions';\nimport {\n  CategoryBox,\n  TaskCard,\n  DownloadFlush,\n  TaskModal,\n} from \"./components\";\n\n\n// TODO Scroll to the right most corner when new category added. on content overflow\n\n/**\n * App Initialized\n * @returns \n */\nfunction App() {\n  //state with hook\n  //TODO Move this all the a custom hook\n  const [selectedCategory, setselectedCategory] = useState(null);\n  const [selectedTask, setSelectedTask] = useState(null);\n  const [mode, setMode] = useState('CREATE');//to handle the update/create/duplicate for the task\n  const [addNewCategory, setAddNewCategory] = useState(false);\n\n  const dispatch = useDispatch(); // to dispatch the redux action\n\n  const categoryState = useSelector(state => state.category);//access the category redux state\n  /**\n   * Fetch categories\n   */\n  useEffect(() => {\n    dispatch(getCategories()).catch(err => {\n    });\n  }, [dispatch]);//call the function only once when the app initialized for the first time.\n\n  return (\n    <div className=\"App\">\n      {/* React DnD Lirabry for drag and drop task around the category box */}\n      <DragDropContext\n        onDragEnd={(result) => {\n          const { destination, source, draggableId } = result;\n          if (!destination) {\n            return;\n          }\n          if (\n            destination.droppableId === source.droppableId &&\n            destination.index === source.index\n          ) {\n            return;\n          }\n          //reorder the category statically and with api when dropped.\n          dispatch(reOrderCategory({ destination: destination.droppableId, id: draggableId, source: source.droppableId, sourceIndex: source.index, destinationIndex: destination.index }));\n        }}\n      >\n        {categoryState.data.map((category, catIn) => {\n          //Category Box contains the list of task under a category\n          return (\n            <Droppable droppableId={String(category._id)} key={category._id}>\n              {(provided, snapshot) => (\n                <section className={\"category_iterator \" + (snapshot.isDraggingOver ? 'dragging_over' : '')} {...provided.droppableProps} ref={provided.innerRef}>\n                  <CategoryBox\n                    key={catIn}\n                    category={category}\n                  >\n                    {category.tasks ? category.tasks.map((task, taIn) => {\n                      //Task List inside the categories which can be moved aroud\n                      return <Draggable index={taIn} draggableId={String(task._id)} key={task._id}>\n                        {(provided, snapshot) =>\n                          <div ref={provided.innerRef}\n                            className={snapshot.isDragging ? 'is_dragging' : ''}\n                            {...provided.draggableProps}\n                            {...provided.dragHandleProps}>\n                            <TaskCard\n                              onUpdate={() => {\n                                setSelectedTask(task);\n                                setselectedCategory(category);\n                              }}\n                              onDuplicate={() => {\n                                setSelectedTask(task);\n                                setselectedCategory(category);\n                                setMode('DUPLICATE');\n                              }} key={taIn} task={task} />\n                          </div>\n                        }\n                      </Draggable>;\n                    }) : null}\n                    {/* Proceholder */}\n                    {provided.placeholder}\n                    {/* TODO Add New Task Button Move this to a new component*/}\n                    <div\n                      onClick={() => {\n                        if (!category.static) {\n                          setSelectedTask(null);\n                          setselectedCategory(category);\n                        }\n                      }}\n                      className={\"action_add action_add_item\"}\n                    >\n                      <i className=\"fas fa-plus-circle\"></i> &nbsp;Add New Task..\n                  </div>\n                  </CategoryBox>\n                </section>\n              )}\n            </Droppable>\n          );\n        })}\n      </DragDropContext>\n\n      {addNewCategory ? <section className=\"category_iterator\">\n        <CategoryBox onSave={() => {\n          setAddNewCategory(false);\n        }} onBlur={() => {\n          setAddNewCategory(false);\n        }} mode={'add'} />\n      </section> : <section style={{ marginRight: 40 }}\n        onClick={() => {\n          setAddNewCategory(true);\n        }}\n        className=\"action_add action_add_category\"\n      >\n        <i className=\"fas fa-plus-circle\"></i> &nbsp;Add New Category\n      </section>}\n\n      <TaskModal mode={mode} selectedTask={selectedTask} show={selectedCategory !== null} category={selectedCategory} onClose={() => {\n        setselectedCategory(null);\n        setSelectedTask(null);\n      }} />\n\n      {categoryState.data.length > 0 ? <DownloadFlush /> : null}\n    </div >\n  );\n}\n\nexport default App;\n\n\n\n// requestAnimationFrame(() => {\n  // events.changeStrokeColor(\"blue\");\n  // events.changeStrokeWidth(5)\n  // events.startDrawing(100, 100)\n  // events.pushPoint(100, 200)\n  // events.pushPoint(200, 200)\n  // events.pushPoint(200, 100)\n  // events.pushPoint(110, 100)\n  // events.stopDrawing()\n  // events.undo()\n  // events.undo()\n// });\n\n// const events = new EventStream();\n// const eventStore = new EventStore();\n// eventStore.goodEvents = goodEvents;\n// events.on(\"selectLayer\", function () {\n//   console.log(\"selectLayer\");\n// });\n// events.on(\"addLayer\", function (value) {\n//   console.log(\"addLayer\", value);\n// });\n\n// events.on(\"start\", function (value) {\n//   console.log(\"start\", value);\n// });\n\n// events.on(\"stop\", function (value) {\n//   console.log(\"stop\", value);\n\n//   console.log(eventStore.goodEvents);\n// });\n\n// events.on(\"startDragging\", function (value) {\n//   console.log(\"startDragging\", value);\n// });\n// events.on(\"stopDragging\", function (value) {\n//   console.log(\"stopDragging\", value);\n// });\n\n// events.on(\"drag\", function (value) {\n//   console.log(\"drag\", value);\n// });\n\n// events.on(\"startResizing\", function (value) {\n//   console.log(\"startResizing\", value);\n// });\n// events.on(\"stopResizing\", function (value) {\n//   console.log(\"stopResizing\", value);\n// });\n// events.on(\"resize\", function (value) {\n//   console.log(\"stopDragging\", value);\n// });\n\n// events.on(\"redo\", function (value) {\n//   console.log(\"redo\", value);\n// });\n\n// events.on(\"undo\", function (value) {\n//   console.log(\"undo\", value);\n// });\n// events.on(\"clear\", function (value) {\n//   console.log(\"clear\", value);\n// });\n// hkl_user \n// DlA1fsCnWsp1PjIz\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import { randomStr } from '../../utils';\nimport * as ActionTypes from './../ActionTypes';\n\nconst INITIAL_STATE = {\n    saving: false,\n    data: [\n        // {name:'category',tasks:[{},{}]},\n        // {name:'category',tasks:[{},{}]}\n    ],\n    fetching: false,\n    lastSavedOrder: {\n        destination: '',\n        id: '',\n        source: ''\n    }\n}\n\n\n/**\n * \n * @param {*} state \n * @param {*} action \n * @returns \n */\nconst CategoryReducer = (state = INITIAL_STATE, action) => {\n\n    /**\n     * Filter the task with the given id from the state\n     * @param {*} taskId \n     * @returns \n     */\n    function filterFromTask(taskId) {\n        let tsk = null;\n        try {\n            state.data.map(item => {\n                item.tasks.map(task => {\n                    if (task._id === taskId) {\n                        tsk = task;\n                        throw Error(\"\");\n                    }\n                    return task;\n                });\n                return item;\n            });\n        } catch (err) {\n        }\n        return tsk;\n    }\n\n\n    /**\n     * Reducer Begins here\n     */\n    switch (action.type) {\n        case ActionTypes.CATEOGRY_GENERAL_STATE:\n            if (!action.payload.deep) {\n                state[action.payload.props] = action.payload.value;\n            }\n            else\n                state[action.payload.props][action.payload.deep] = action.payload.value;\n            return {\n                ...state\n            };\n        case ActionTypes.CATEGORY_CREATE_STATIC:\n            state.data.push({ name: action.payload.name, tasks: [], _id: randomStr(10), static: true });\n            return {\n                ...state\n            };\n        case ActionTypes.CATEGORY_TASK_REORDER_STATIC:\n            const taskSelected = filterFromTask(action.payload.id);\n            state.data.map(item => {\n                item.tasks = item.tasks.filter(task => {\n                    return (task._id !== action.payload.id);\n                });\n                return item;\n            });\n\n\n            state.data = state.data.map(item => {\n                if (item._id === action.payload.destination) {\n                    if (taskSelected) {\n                        taskSelected.category = action.payload.destination;\n                    }\n                    item.tasks.push(taskSelected);\n                }\n                return item;\n            });\n            // console.log(state.data, 'reducer');\n            state.lastSavedOrder = action.payload;\n            return {\n                ...state\n            };\n        case ActionTypes.CATEGORY_TASK_UPDATE_STATIC:\n            if (action.payload.mode === 'DUPLICATE') {\n                state.data.map(item => {\n                    item.tasks = item.tasks.map(task => {\n                        if (task._id === action.payload.id) {\n                            task.svg_events = action.payload.svg_events;\n                            // task.static = true;\n                        }\n                        return task;\n                    });\n                    return item;\n                });\n            }\n            return {\n                ...state\n            };\n\n        case ActionTypes.CATEGORY_TASK_STATIC:\n            state.data.map(item => {\n                if (item._id === action.payload.category) {\n                    let isStatic = false;\n                    let id = randomStr(10);\n                    if (action.payload.id) {\n                        id = action.payload.id;\n                        isStatic = false;\n                    }\n\n                    item.tasks.push({ _id: id, svg_events: action.payload.svg_events, category: action.payload.category, static: isStatic });\n                }\n                return item;\n            });\n            return {\n                ...state\n            };\n\n        case ActionTypes.CATEGORY_TASK_DELETE_STATIC:\n            let categoryIndex = null;\n            let taskIndex = null;\n            try {\n                state.data.map((item, c) => {\n                    categoryIndex = c;\n                    item.tasks.map((task, t) => {\n                        if (task._id === action.payload.value) {\n                            taskIndex = t;\n                            throw Error(\"stop\");\n                        }\n                        return task;\n                    })\n                    return item;\n                })\n            } catch (e) {\n            }\n            if (categoryIndex !== null && taskIndex !== null && state.data[categoryIndex]) {\n                state.data[categoryIndex].tasks.splice(taskIndex, 1);\n            }\n            return {\n                ...state\n            }\n        default:\n            return { ...state }\n    }\n}\n\nexport default CategoryReducer;","import * as ActionTypes from './../ActionTypes';\n\nconst INITIAL_STATE = {\n    saving: false,\n    data: [],\n    ordering: false,\n\n}\n\n/**\n * \n * @param {*} state \n * @param {*} action \n * @returns \n */\nconst TaskReducer = (state = INITIAL_STATE, action) => {\n    switch (action.type) {\n        case ActionTypes.TASK_GENERAL_STATE:\n            if (!action.payload.deep) {\n                state[action.payload.props] = action.payload.value;\n            }\n            else\n                state[action.payload.props][action.payload.deep] = action.payload.value;\n            return {\n                ...state\n            };\n        default:\n            return { ...state }\n    }\n}\n\nexport default TaskReducer;","import { combineReducers } from 'redux';\nimport categoryReducer from './categoryReducer';\nimport taskReducer from './taskReducer';\n\nexport default combineReducers({\n    category: categoryReducer,\n    task: taskReducer\n});","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './scss/main.scss';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport { Provider } from 'react-redux';\nimport { createStore, applyMiddleware, compose } from 'redux';\nimport thunk from 'redux-thunk';\nimport reducers from './store/reducers';\n\nconst store = createStore(reducers, compose(applyMiddleware(thunk)));\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}